## Server Properties ##
server.contextPath=/
server.port = 9091

# exclude auto-configuration classes (or) @EnableAutoConfigure(exclude={*.class})
# spring.autoconfigure.exclude = 

#spring.resources.static-locations=
spring.resources.cache-period=10

spring.mvc.view.prefix = /WEB-INF/views/
spring.mvc.view.suffix = .jsp

## to refresh the page automatically // we need to install "LiveReload browser extension" that should be enable
spring.devtools.restart.additional-paths=.

## To trigger the auto-restart of specified file
spring.devtools.restart.trigger-file=CourseApiApp.java

spring.devtools.restart.exclude=static/page1.html

#Amount of time (in milliseconds) to wait between polling for classpath changes.
spring.devtools.restart.poll-interval=1000
#Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.
spring.devtools.restart.quiet-period=400

#mapping to java object using the below prefixed properties
app.map.name1 = value1
app.map.name2 = value2
app.map.name3 = value3

app.adminEmails[0]=pqr@example.com
app.adminEmails[1]=abc@example.com
app.adminEmails[2]=xyz@example.com

app.sendEmailOnErrors=true
#Custom conversion format, here i ve used hyphon in property (@ConfigurationProperties maps this to java object property, so it is called relaxed mapping)
app.trade-start-date=12-22-2018
app.contactNumber = 09972375015
app.address.zipCode=560100

# To Generate random values for properties, that should start with "random."
# we can config for long type similar to below prop
# Random int
app.location-x=${random.int}
app.location-y = ${random.int}
# Random int with max
app.user-age = ${random.int(100)}
# Random int with range
app.max-users = ${random.int[1,1000]}
#Random 32 bytes
app.user-password = ${random.value}
#Random uuid
app.instance-id = ${random.uuid}
## profile properties ##
# when more than once profile declared , last one would execute (i.e.here "in-memory")
#spring.profiles.active = production
#spring.profiles.active = in-memory

# used to unconditionally add active profiles (comma-separated)
#spring.profiles.include=romote,live

app.window.width=100
app.window.height=200
#spring.profiles.active=prod
spring.profiles.include=dev,in-memory

## Logging ##
#spring.output.ansi.enabled=ALWAYS
## specifies the location of the logging configuration file
#logging.config
## This property is used to set the location of a file to log to (in addition to the console).
logging.file = my-log.log
## Location of the log file. If the logging.file property is not specified then the file "spring.log" will be written in the logging.path directory.
#logging.path = F:/
## Specifies Log levels. The value can be one of TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF.
# logging.level.xyz
## The root logger can be configured using logging.level.root.
# logging.level.root=FATAL
## This property specifies the pattern for console output.
#logging.pattern.console=%clr(%d{yy-MM-dd E HH:mm:ss.SSS}){blue} %clr(%-5p) %clr(${PID}){faint} %clr(---){faint} %clr([%8.15t]){cyan} %clr(%-40.40logger{0}){blue} %clr(:){red} %clr(%m){faint}%n
## Th pattern for file output.
# logging.pattern.file
## This is the pattern for log Level portion usually in "%np" format (for space padding) where n is an integer.
# logging.pattern.level

## Actuator ##
## Enable Actuator
management.endpoints.web.exposure.include=*

## h2 db ##
spring.h2.console.enabled=true

## Remote DB ##
#spring.datasource.url=jdbc:mysql://localhost:3306/my_schema?useSSL=false
#spring.datasource.username=root
#spring.datasource.password=1234
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

## Security ##
spring.security.user.name=admin
spring.security.user.password=admin123
#spring.security.user.roles=ADMIN
